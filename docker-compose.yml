version: '2.1'

volumes:
  # We'll define a volume that will store the data from the postgres databases:
  postgres-data:
    driver: local
  # The rabbitmq data store volume
  #redis-data:
  #  driver: local
  # We'll also define a volume that will store gems installed manually after the initial app
  # development image build process:
  node-modules:
    driver: local

services:
  # Our PostgreSQL service:
  postgres:
    image: postgres:9.6.1
    ports:
      # We'll bind our host's port 5432 to postgres's port 5432, so we can use
      # our database IDEs with it:
      - 5432:5432
    volumes:
      #- ./tools/init.sql:/docker-entrypoint-initdb.d/init.sql
      # We'll mount the 'postgres-data' volume into the location Postgres stores it's data:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: 3x4mpl3

  # Our Redis service:
  # redis:
  #   image: redis:3.2.4-alpine
  #   ports:
  #     # We'll bind our host's port 6379 to redis's port 6379, so we can use
  #     # Redis Desktop Manager (or other tools) with it:
  #     - 6379:6379
  #   volumes:
  #     # We'll mount the 'redis-data' volume into the location redis stores it's data:
  #     - redis-data:/var/lib/redis
  #   command: redis-server --appendonly yes

  # Application: -----------------------------------------------------------------
  # We'll also use this configuration (&app_base) for the web and test containers:
  # web:
  #   image: nossas/vivo-em-nos
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile
  #
  #   volumes:
  #     # Mount our app code directory (".") into our app containers at the
  #     # "/usr/src/app" folder:
  #     - ./:/usr/src/app:Z
  #
  #   links:
  #     # We'll include a link to the 'db' (postgres) container, making it visible from the container
  #     # using the 'postgres.local' hostname (which is not necessary, but I'm doing it here to
  #     # illustrate that you can play with this):
  #     - postgres:db.vivo-em-nos.devel
  #
  #     # We'll include a link to the 'keyval' (redis) container, making it
  #     # visible from the container using the 'keyval.local' hostname:
  #     - redis:keyval.vivo-em-nos.devel
  #
  #   environment:
  #     # The postgres database URL:
  #     DATABASE_URL: postgres://postgres:3x4mpl3@db.vivo-em-nos.devel:5432/vivo-em-nos-pwa
  #
  #     QUEUE: "*"
  #
  #     # The redis URL:
  #     REDIS_URL: redis://keyval.vivo-em-nos.devel:6379
  #
  #     # Sidekiq configuration:
  #     WEB_CONCURRENCY: 1
  #     WEB_MEMORY: 256

  # This container will run the rails web server:
  data:
    image: nossas/bonde-graphql
    # command: rails server -p 3000 -b 0.0.0.0
    ports:
      - "3003:3003" # Bind our host's port 3000 to the app port 3000:
    links:
      - postgres:db.vivo-em-nos.devel
      - img:data.vivo-em-nos.devel
    command: npm run dev
    environment:
      - DATABASE_URL=postgres://postgres:3x4mpl3@db.vivo-em-nos.devel:5432/vivo-em-nos-pwa
      - PORT=3003
  # App Guard: Keeps running tests on a separate process:
  img:
    # We'll copy from &app_base, and override:
    image: h2non/imaginary
    ports:
      - "3009:9000"
    volumes:
      - /tmp/images:/images:Z

    command: "-cors -gzip -enable-url-source -mount /images -http-cache-ttl 0 -allowed-origins http://vivo-em-nos.devel:3000,http://vivoemnos.org"
